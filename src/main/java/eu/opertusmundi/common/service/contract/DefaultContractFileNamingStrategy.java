package eu.opertusmundi.common.service.contract;

import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

@Service
public final class DefaultContractFileNamingStrategy implements ContractFileNamingStrategy {

    private static final Set<PosixFilePermission> DEFAULT_DIRECTORY_PERMISSIONS = PosixFilePermissions.fromString("rwxrwxr-x");

    private final Path contractDirectory;

    private final Path orderDirectory;

    @Autowired
    public DefaultContractFileNamingStrategy(Path contractDirectory, Path orderDirectory) {
        this.contractDirectory = contractDirectory;
        this.orderDirectory    = orderDirectory;

    }

    @Override
    public Path resolvePath(ContractFileNamingStrategyContext ctx) throws IOException {
        Assert.notNull(ctx, "Expected a non-null context");
        Assert.notNull(ctx.getType(), "Expected a non-null contract type");
        Assert.notNull(ctx.getUserId(), "Expected a non-null user identifier");
        Assert.notNull(ctx.getOrderKey(), "Expected a non-null order key");
        Assert.notNull(ctx.getItemIndex(), "Expected a non-null order item index");
        Assert.isTrue(ctx.getItemIndex() > 0, "Expected an order item index greater than zero");

        switch (ctx.getType()) {
            case MASTER_CONTRACT :
                // Contract is generated by the Topio market using a contract template
                final Path contractDir = this.contractDirectory.resolve(Paths.get(ctx.getUserId().toString()));

                if (ctx.isCreateIfNotExists() && !Files.exists(contractDir)) {
                    try {
                        Files.createDirectories(contractDir);
                        Files.setPosixFilePermissions(contractDir, DEFAULT_DIRECTORY_PERMISSIONS);
                    } catch (final FileAlreadyExistsException ex) {
                        // Another thread may have created this entry
                    }
                }
                final String contractPathTemplate = ctx.isSigned() ? "%s-%d-signed.pdf" : "%s-%d.pdf";
                final String contractRelativePath = String.format(contractPathTemplate, ctx.getOrderKey(), ctx.getItemIndex());

                return contractDir.resolve(contractRelativePath);

            case UPLOADED_CONTRACT :
                // Custom contract uploaded per order record
                final Path orderDir = this.orderDirectory.resolve(
                    Paths.get(ctx.getUserId().toString(), ctx.getOrderKey().toString(), ctx.getItemIndex().toString())
                );

                if (ctx.isCreateIfNotExists() && !Files.exists(orderDir)) {
                    try {
                        Files.createDirectories(orderDir);
                        Files.setPosixFilePermissions(orderDir, DEFAULT_DIRECTORY_PERMISSIONS);
                    } catch (final FileAlreadyExistsException ex) {
                        // Another thread may have created this entry
                    }
                }

                final String uploadPathTemplate = ctx.isSigned() ? "%s-%d-signed.pdf" : "%s-%d.pdf";
                final String uploadedContractRelativePath = String.format(uploadPathTemplate, ctx.getOrderKey(), ctx.getItemIndex());

                return orderDir.resolve(uploadedContractRelativePath);

            case OPEN_DATASET :
                // No contract exists
                break;
        }

        return null;
    }

}